{"version":3,"sources":["App.tsx","index.tsx"],"names":["translations","App","useState","density","setDensity","stopped","setStopped","stoppedRef","useRef","generateGrid","rows","i","push","Array","from","Math","random","grid","setGrid","runSimulation","useCallback","current","g","produce","gridCopy","j","neighbours","forEach","x","y","setTimeout","style","display","backgroundColor","onClick","width","htmlFor","type","min","max","defaultValue","onChange","d","target","valueAsNumber","gridTemplateColumns","map","row","col","newGrid","height","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAKMA,EAAe,CACnB,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAqISC,EA/HO,WAAO,IAAD,EAEIC,mBAAS,IAFb,mBAEnBC,EAFmB,KAEVC,EAFU,OAIIF,oBAAS,GAJb,mBAInBG,EAJmB,KAIVC,EAJU,KAKpBC,EAAaC,iBAAOH,GAEpBI,EAAe,WAEnB,IAFqC,IAAjBN,EAAgB,uDAAN,EACxBO,EAAO,GACJC,EAAI,EAAGA,EAZJ,GAYiBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAbH,KAamB,kBAAQE,KAAKC,SAAWb,EAAU,EAAI,MAGrE,OAAOO,GAdiB,EAiBFR,oBAAS,WAC/B,OAAOO,OAlBiB,mBAiBnBQ,EAjBmB,KAiBbC,EAjBa,KAqBpBC,EAAgBC,uBAAY,WAC3Bb,EAAWc,UAIhBH,GAAQ,SAACI,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBb,GACP,IAF4B,eAEnBc,GACP,IAAIC,EAAa,EAEjB1B,EAAa2B,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAE7BlB,EAAIiB,GAAK,GACTjB,EAAIiB,EAtCJ,IAuCAH,EAAII,GAAK,GACTJ,EAAII,EAvCJ,KAyCAH,GAAcJ,EAAEX,EAAIiB,GAAGH,EAAII,OAI3BH,EAAa,GAAKA,EAAa,EACjCF,EAASb,GAAGc,GAAK,EACO,IAAfC,IACTF,EAASb,GAAGc,GAAK,IAjBZA,EAAI,EAAGA,EA/BV,GA+BuBA,IAAM,EAA1BA,IADFd,EAAI,EAAGA,EA/BR,GA+BqBA,IAAM,EAA1BA,SAyBbmB,WAAWX,EAAe,QACzB,IAEH,OACE,qCACE,sBAAKY,MAAO,CAAEC,QAAS,QAAvB,UACE,wBACED,MAAO,CAACE,gBAAiB5B,EAAU,OAAS,OAC5C6B,QAAS,WACP5B,GAAYD,GACZE,EAAWc,QAAUhB,EACrBc,KALJ,SAQGd,EAAU,QAAU,SAEvB,qBAAK0B,MAAO,CAACI,MAAO,UACpB,wBACED,QAAS,WACPhB,EAAQT,MAFZ,mBAOA,wBACEyB,QAAS,WACPhB,EAAQT,EAAaN,KAFzB,sBAOA,qBAAK4B,MAAO,CAACI,MAAO,UACpB,uBAAOC,QAAQ,UAAf,uBACA,uBACEC,KAAK,QACLC,IAAK,EACLC,IAAK,IACLC,aAAwB,IAAVrC,EACdsC,SAAU,SAACC,GACTtC,EAAWsC,EAAEC,OAAOC,cAAgB,QAGxC,4BAAIzC,OAEN,qBACE4B,MAAO,CACLC,QAAS,OACTa,oBAAoB,UAAD,OAtGb,GAsGa,YAHvB,SAMG5B,EAAK6B,KAAI,SAACC,EAAKpC,GAAN,OACRoC,EAAID,KAAI,SAACE,EAAKvB,GAAN,OACN,qBAEES,QAAS,WACP,IAAMe,EAAU1B,YAAQN,GAAM,SAACO,GAC7BA,EAASb,GAAGc,GAAK,EAAID,EAASb,GAAGc,MAEnCP,EAAQ+B,IAEVlB,MAAO,CACLI,MAAO,GACPe,OAAQ,GACRjB,gBAAiBhB,EAAKN,GAAGc,GAAK,WAAQ0B,EACtCC,OAAQ,oBAZZ,UACUzC,EADV,YACec,gBCxH3B4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.52c47b5c.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport produce from \"immer\";\n\nconst translations = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n];\n\nconst numRows = 50\nconst numCols = 50\n\nconst App: React.FC = () => {\n\n  const [density, setDensity] = useState(0.5);\n\n  const [stopped, setStopped] = useState(true);\n  const stoppedRef = useRef(stopped);\n\n  const generateGrid = (density = 0) => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(\n        Array.from(Array(numCols), () => ((Math.random() < density ? 1 : 0) as number))\n      );\n    }\n    return rows;\n  };\n\n  const [grid, setGrid] = useState(() => {\n    return generateGrid();\n  });\n\n  const runSimulation = useCallback(() => {\n    if (!stoppedRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbours = 0;\n\n            translations.forEach(([x, y]) => {\n              if (\n                i + x >= 0 &&\n                i + x < numRows &&\n                j + y >= 0 &&\n                j + y < numCols\n              ) {\n                neighbours += g[i + x][j + y];\n              }\n            });\n\n            if (neighbours < 2 || neighbours > 3) {\n              gridCopy[i][j] = 0;\n            } else if (neighbours === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <button\n          style={{backgroundColor: stopped ? 'lime' : \"red\"}}\n          onClick={() => {\n            setStopped(!stopped);\n            stoppedRef.current = stopped;\n            runSimulation();\n          }}\n        >\n          {stopped ? \"start\" : \"stop\"}\n        </button>\n        <div style={{width: '20px'}}/>\n        <button\n          onClick={() => {\n            setGrid(generateGrid());\n          }}\n        >\n          clear\n        </button>\n        <button\n          onClick={() => {\n            setGrid(generateGrid(density));\n          }}\n        >\n          generate\n        </button>\n        <div style={{width: '20px'}}/>\n        <label htmlFor=\"density\">Density: </label>\n        <input\n          type=\"range\"\n          min={0}\n          max={100}\n          defaultValue={density * 100}\n          onChange={(d) => {\n            setDensity(d.target.valueAsNumber / 100);\n          }}\n        />\n        <a>{density}</a>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((row, i) =>\n          row.map((col, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][j] = 1 - gridCopy[i][j];\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? \"red\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}